---
// API TEMPLATE:
//// const pathBySlug = `${apiUrl}/slots?filters[name][$eq]=${`Gates of Olympus`}&populate=image`;
//   const testPageItems = await fetchApi({
//       endpoint: `page-slots?filters[slug][$eq]=hell-hot&populate[hero][populate][btn][populate]=*&populate[hero][populate][coverImage][populate]=*`
//   });
//   console.log('testPageItems::::', testPageItems['data'])

// OLD:
// const pageSlotSchema = await fetchApi({
//     endpoint: `page-slot-${slot}?${queries(SlotQueries)}`,
// });
// const faqData = pageSlotSchema ? pageSlotSchema['data']['attributes']?.faqBlock: null;

import { endpoints, fetchApi } from '@api/index';
import { getSlotsBySlug } from '@api/endpoint';
import Layout from '@layout/Layout.astro';
import WithBottom from '@components/spaces/WithBottom.astro';
import SlotBonus from '@content/slot/SlotBonus.astro';
import SlotDetailsArticle from '@content/slot/SlotDetailsArticle.astro';
import SlotArticle from '@content/slot/SlotArticle.astro';
import GenerateText from '@components/richtext/GenerateText/GenerateText.astro';
import AccordionContainer from '@components/accordion/AccordionContainer.astro';
import BannerItem1 from '@components/banner/BannerItem1.astro';
import BlockOfetas from '@content/home/BlockOfetas/BlockOfetas.astro';
import RichText from '@components/richtext/RichText.astro';
// import BonusHero from "@content/bonus/BonusHero.astro";
import SlotHero from "@content/slot/SlotHero.astro";
// import SlotHero from '@content/slot/SlotHero.astro';

export async function getStaticPaths() {
  const pageSlots = await fetchApi({ endpoint: endpoints.slots });
  return pageSlots['data']?.map(item=> {
    return ({
      params: { slot: item.attributes.slug },
      props: { name: item.attributes.name }
    })
  })
}

const { slot } = Astro.params;
const pageSlotData = await fetchApi({ endpoint: getSlotsBySlug(slot) });
const pageSlotSchema = pageSlotData['data']?.find(item => item.attributes.slug === slot);
const pageBlocks = pageSlotSchema?.attributes;
const dataHero = pageBlocks?.hero;
const dataOfferSlider = pageBlocks?.slotsSlider;
const dataArticleMain = pageBlocks?.articleMain;
const dataArticleList = pageBlocks?.articleList;
const dataBonusSlider = pageBlocks?.bonusSlider;
const dataBonusList = pageBlocks?.bonusList;
const dataBlackRiderArticle = pageBlocks?.blackRiderArticle;
const dataBanner = pageBlocks?.banner;
const faqData = pageBlocks?.faqBlock;
const dataSeo = pageBlocks?.seo;

---
<Layout seo={dataSeo}>
  <!-- <SlotHero data={dataHero}/>-->
  { dataHero &&
      <WithBottom>
        <SlotHero data={dataHero}/>
      </WithBottom>
  }
<!-- 1 -->
  { dataOfferSlider &&
        <BlockOfetas
          data={dataOfferSlider}
        />
  }
    <!-- 2 -->
  {dataArticleMain && 
    <WithBottom>
      <SlotArticle
        data={dataArticleMain}
      />
    </WithBottom>
  }
<!-- 3 -->
  { (!!dataArticleList?.length) && 
        dataArticleList.map(article => { 
            return (
                <GenerateText
                    data = {article}
                    blockStyle={'mb-4'}
                    textStyle={{
                      h3: 'my-4',
                    }}
                />
            )
        })
    }
<!-- 4 -->
    {dataBonusSlider &&
      <SlotBonus
        data={dataBonusSlider}
      />
    }
<!-- 5 -->
    {!!dataBonusList?.length && 
    <WithBottom>
      <section class="bg-pnp/[.03] border border-pnp/[.1] rounded-[24px] sm:rounded-[30px] px-[24px] py-[24px] sm:px-[32px] sm:py-[32px] bg-gradient-to-bl from-pnp-red/[.4] to-50% ">
        <ul class=" grid max-w-xl grid-cols-1 gap-8 text-base leading-7 text-gray-700 lg:max-w-none lg:grid-cols-3">
            { dataBonusList.map(item =>{
              return (
                  <li>
                    <RichText
                        data={item.descrition}
                        styles={{
                          h3: '!text-24-26-700 mb-4 text-pnp',
                          paragraph: '!text-16-24-400 text-pnp-grey20'
                        }}
                    />
                  </li>
              )
            })}
        </ul>
      </section>
    </WithBottom>
  }

<!-- 6 -->
{dataBlackRiderArticle && 
    <SlotDetailsArticle
        data={dataBlackRiderArticle}
    />
}
<!-- 7 -->
  {dataBanner && 
    <WithBottom>
      <BannerItem1
        data={dataBanner}
      />
    </WithBottom>
  }
<!-- 8 -->
  {faqData &&
    <WithBottom>
      <AccordionContainer
          data={faqData}
      />
    </WithBottom>
  }
</Layout>